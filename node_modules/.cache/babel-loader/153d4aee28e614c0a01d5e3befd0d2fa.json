{"ast":null,"code":"var _jsxFileName = \"/Users/ramonmeijers/Documents/School/Leerjaar 3/techtrack/frontend-applications/frontend-application/src/components/DrawingBoard.js\";\n\n/* eslint-disable default-case */\nimport React, { Component } from 'react';\nimport CanvasFreeDrawing from 'canvas-free-drawing';\n\nclass DrawingBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeColor = color => {\n      switch (color) {\n        case \"white\":\n          this.setState({\n            color: [255, 255, 255]\n          });\n          break;\n\n        case \"black\":\n          this.setState({\n            color: [0, 0, 0]\n          });\n          break;\n\n        case \"gray\":\n          this.setState({\n            color: [100, 100, 100]\n          });\n          break;\n\n        case \"red\":\n          this.setState({\n            color: [255, 0, 0]\n          });\n          break;\n\n        case \"blue\":\n          this.setState({\n            color: [0, 0, 255]\n          });\n          break;\n\n        case \"purple\":\n          this.setState({\n            color: [255, 0, 255]\n          });\n          break;\n\n        case \"green\":\n          this.setState({\n            color: [0, 255, 0]\n          });\n          break;\n\n        case \"brown\":\n          this.setState({\n            color: [139, 69, 19]\n          });\n          break;\n\n        case \"orange\":\n          this.setState({\n            color: [255, 140, 100]\n          });\n          break;\n\n        case \"yellow\":\n          this.setState({\n            color: [255, 255, 0]\n          });\n          break;\n      }\n    };\n\n    this.actionButton = action => {\n      switch (action) {\n        case \"undo\":\n          this.cfd.undo();\n          break;\n\n        case \"redo\":\n          this.cfd.redo();\n          break;\n\n        case \"bucket\":\n          const isActive = this.cfd.toggleBucketTool();\n          document.getElementById('button').classList.add('active');\n\n          if (isActive) {} else {\n            document.getElementById('button').classList.remove('active');\n          }\n\n          break;\n      }\n    };\n\n    this.state = {\n      color: []\n    };\n  }\n\n  componentDidMount() {\n    this.cfd = new CanvasFreeDrawing({\n      elementId: 'cfd',\n      width: 500,\n      height: 500\n    });\n    this.cfd.setLineWidth(10); // in px\n  }\n\n  componentDidUpdate() {\n    this.cfd.setStrokeColor(this.state.color); // in RGB\n\n    this.cfd.configBucketTool({\n      color: this.state.color,\n      tolerance: 50\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"cfd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.changeColor('white'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Gum\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('black'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Zwart\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('gray'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Grijs\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('red'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Rood\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('blue'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Blauw\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('purple'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"Paars\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('green'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Groen\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('brown'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, \"Bruin\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('orange'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Oranje\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('yellow'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Geel\"), React.createElement(\"button\", {\n      id: \"button\",\n      onClick: () => this.actionButton('bucket'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Emmer\"), React.createElement(\"button\", {\n      onClick: () => this.actionButton('undo'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Stapje terug\"), React.createElement(\"button\", {\n      onClick: () => this.actionButton('redo'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Stapje vooruit\"));\n  }\n\n}\n\nexport default DrawingBoard;","map":{"version":3,"sources":["/Users/ramonmeijers/Documents/School/Leerjaar 3/techtrack/frontend-applications/frontend-application/src/components/DrawingBoard.js"],"names":["React","Component","CanvasFreeDrawing","DrawingBoard","constructor","props","changeColor","color","setState","actionButton","action","cfd","undo","redo","isActive","toggleBucketTool","document","getElementById","classList","add","remove","state","componentDidMount","elementId","width","height","setLineWidth","componentDidUpdate","setStrokeColor","configBucketTool","tolerance","render"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport React, { Component } from 'react'\nimport CanvasFreeDrawing from 'canvas-free-drawing';\n\nclass DrawingBoard extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            color: []\n        }\n\n    }\n\n\n    componentDidMount(){\n        this.cfd = new CanvasFreeDrawing({\n            elementId: 'cfd',\n            width: 500,\n            height: 500,\n          });\n          this.cfd.setLineWidth(10); // in px\n\n    }\n\n    componentDidUpdate(){\n\n        this.cfd.setStrokeColor(this.state.color); // in RGB\n        this.cfd.configBucketTool({\n            color: this.state.color,\n            tolerance: 50\n        });\n\n    }\n\n    changeColor = (color) => {\n        switch(color){\n            case \"white\":\n                this.setState({color: [255, 255, 255]});\n                break;\n            case \"black\":\n                this.setState({color: [0, 0, 0]});\n                break;\n            case \"gray\":\n                this.setState({color: [100, 100, 100]});\n                break;\n            case \"red\":\n                this.setState({color: [255, 0, 0]});\n                break;\n            case \"blue\":\n                this.setState({color: [0, 0, 255]});\n                break;\n            case \"purple\":\n                this.setState({color: [255, 0, 255]});\n                break;\n            case \"green\":\n                this.setState({color: [0, 255, 0]});\n                break;\n            case \"brown\":\n                this.setState({color: [139, 69, 19]});\n                break;\n            case \"orange\":\n                this.setState({color: [255, 140, 100]});\n                break;\n            case \"yellow\":\n                this.setState({color: [255, 255, 0]});\n                break;\n                \n        }\n\n    }\n\n    actionButton = (action) => {\n\n        switch(action){\n            case \"undo\":\n                this.cfd.undo();\n                break;\n            case \"redo\":\n                this.cfd.redo();\n                break;\n            case \"bucket\":\n\n            const isActive = this.cfd.toggleBucketTool();\n            document.getElementById('button').classList.add('active');\n            if (isActive) {\n            } else {\n              document.getElementById('button').classList.remove('active');\n            }\n            break;\n        }\n\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <canvas id=\"cfd\"></canvas>\n                <button onClick={() => this.changeColor('white')}>Gum</button>\n                <button onClick={() => this.changeColor('black')}>Zwart</button>\n                <button onClick={() => this.changeColor('gray')}>Grijs</button>\n                <button onClick={() => this.changeColor('red')}>Rood</button>\n                <button onClick={() => this.changeColor('blue')}>Blauw</button>\n                <button onClick={() => this.changeColor('purple')}>Paars</button>\n                <button onClick={() => this.changeColor('green')}>Groen</button>\n                <button onClick={() => this.changeColor('brown')}>Bruin</button>\n                <button onClick={() => this.changeColor('orange')}>Oranje</button>\n                <button onClick={() => this.changeColor('yellow')}>Geel</button> \n\n\n\n                <button id=\"button\" onClick={() => this.actionButton('bucket')}>Emmer</button> \n                <button onClick={() => this.actionButton('undo')}>Stapje terug</button> \n                <button onClick={() => this.actionButton('redo')}>Stapje vooruit</button> \n\n\n            </div>\n        )\n    }\n}\n\n\n\nexport default DrawingBoard;"]},"metadata":{},"sourceType":"module"}