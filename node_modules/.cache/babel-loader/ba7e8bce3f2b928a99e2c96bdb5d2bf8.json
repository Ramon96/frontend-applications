{"ast":null,"code":"import _defineProperty from \"/Users/ramonmeijers/Documents/School/Leerjaar 3/techtrack/frontend-applications/frontend-application/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/ramonmeijers/Documents/School/Leerjaar 3/techtrack/frontend-applications/frontend-application/src/components/DrawingBoard.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/* eslint-disable default-case */\nimport React, { Component } from 'react';\nimport CanvasFreeDrawing from 'canvas-free-drawing';\n\nclass DrawingBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.changeColor = color => {\n      switch (color) {\n        case \"white\":\n          this.cfd.setStrokeColor([255, 255, 255]); // in RGB\n\n          break;\n\n        case \"black\":\n          this.cfd.setStrokeColor([0, 0, 0]); // in RGB\n\n          break;\n\n        case \"gray\":\n          // this.cfd.setStrokeColor([100, 100, 100]); // in RGB\n          this.setState({\n            color: [255, 0, 0]\n          });\n          this.setState(prevstate => {\n            const newState = _objectSpread({}, prevstate);\n\n            newState[\"color\"] = newState['color'] = [255, 0, 0];\n            return newState;\n          }); // console.log(this.state.color);\n\n          this.cfd.setStrokeColor(this.state.color); // in RGB\n\n          break;\n\n        case \"red\":\n          // this.setState({color: [0, 0, 0]});\n          // console.log(this.state.color);\n          break;\n\n        case \"blue\":\n          // this.cfd.setStrokeColor([0, 0, 255]); // in RGB\n          break;\n\n        case \"purple\":\n          this.cfd.setStrokeColor([255, 0, 255]); // in RGB\n\n          break;\n\n        case \"green\":\n          this.cfd.setStrokeColor([0, 255, 0]); // in RGB\n\n          break;\n\n        case \"brown\":\n          this.cfd.setStrokeColor([139, 69, 19]); // in RGB\n\n          break;\n\n        case \"orange\":\n          this.cfd.setStrokeColor([255, 140, 0]); // in RGB\n\n          break;\n\n        case \"yellow\":\n          this.cfd.setStrokeColor([255, 255, 0]); // in RGB\n\n          break;\n      }\n    };\n\n    this.actionButton = action => {\n      switch (action) {\n        case \"undo\":\n          this.cfd.undo();\n          break;\n\n        case \"redo\":\n          this.cfd.redo();\n          break;\n\n        case \"bucket\":\n          this.cfd.configBucketTool({\n            color: this.state.color,\n            tolerance: 50\n          });\n          const isActive = this.cfd.toggleBucketTool();\n          document.getElementById('button').classList.add('active');\n\n          if (isActive) {} else {\n            document.getElementById('button').classList.remove('active');\n          }\n\n          break;\n      }\n    };\n\n    this.state = {\n      color: []\n    };\n  }\n\n  componentDidMount() {\n    this.cfd = new CanvasFreeDrawing({\n      elementId: 'cfd',\n      width: 500,\n      height: 500\n    });\n  }\n\n  componentDidUpdate() {\n    this.cfd.setLineWidth(10); // in px\n    // this.cfd.setStrokeColor([0, 0, 255]); // in RGB\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"cfd\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => this.changeColor('white'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Gum\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('black'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \"Zwart\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('gray'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Grijs\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('red'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Rood\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('blue'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Blauw\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('purple'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Paars\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('green'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Groen\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('brown'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Bruin\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('orange'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, \"Oranje\"), React.createElement(\"button\", {\n      onClick: () => this.changeColor('yellow'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Geel\"), React.createElement(\"button\", {\n      id: \"button\",\n      onClick: () => this.actionButton('bucket'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, \"Emmer\"), React.createElement(\"button\", {\n      onClick: () => this.actionButton('undo'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Stapje terug\"), React.createElement(\"button\", {\n      onClick: () => this.actionButton('redo'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Stapje vooruit\"));\n  }\n\n}\n\nexport default DrawingBoard;","map":{"version":3,"sources":["/Users/ramonmeijers/Documents/School/Leerjaar 3/techtrack/frontend-applications/frontend-application/src/components/DrawingBoard.js"],"names":["React","Component","CanvasFreeDrawing","DrawingBoard","constructor","props","changeColor","color","cfd","setStrokeColor","setState","prevstate","newState","state","actionButton","action","undo","redo","configBucketTool","tolerance","isActive","toggleBucketTool","document","getElementById","classList","add","remove","componentDidMount","elementId","width","height","componentDidUpdate","setLineWidth","render"],"mappings":"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","sourcesContent":["/* eslint-disable default-case */\nimport React, { Component } from 'react'\nimport CanvasFreeDrawing from 'canvas-free-drawing';\n\nclass DrawingBoard extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            color: []\n        }\n\n    }\n\n\n    componentDidMount(){\n        this.cfd = new CanvasFreeDrawing({\n            elementId: 'cfd',\n            width: 500,\n            height: 500,\n          });\n\n    }\n\n    componentDidUpdate(){\n\n        this.cfd.setLineWidth(10); // in px\n        // this.cfd.setStrokeColor([0, 0, 255]); // in RGB\n    }\n\n    changeColor = (color) => {\n        switch(color){\n            case \"white\":\n                this.cfd.setStrokeColor([255, 255, 255]); // in RGB\n                break;\n            case \"black\":\n                this.cfd.setStrokeColor([0, 0, 0]); // in RGB\n                break;\n            case \"gray\":\n                // this.cfd.setStrokeColor([100, 100, 100]); // in RGB\n                this.setState({color: [255, 0, 0]});\n                this.setState(prevstate => {\n                    const newState = {...prevstate};\n                    newState[\"color\"] = newState['color'] = [255, 0, 0];\n                    return newState;\n                });\n                // console.log(this.state.color);\n        this.cfd.setStrokeColor(this.state.color); // in RGB\n\n                break;\n            case \"red\":\n                // this.setState({color: [0, 0, 0]});\n                // console.log(this.state.color);\n                break;\n            case \"blue\":\n                // this.cfd.setStrokeColor([0, 0, 255]); // in RGB\n                \n                break;\n            case \"purple\":\n                this.cfd.setStrokeColor([255, 0, 255]); // in RGB\n                break;\n            case \"green\":\n                this.cfd.setStrokeColor([0, 255, 0]); // in RGB\n                break;\n            case \"brown\":\n                this.cfd.setStrokeColor([139, 69, 19]); // in RGB\n                break;\n            case \"orange\":\n                this.cfd.setStrokeColor([255, 140, 0]); // in RGB\n                break;\n            case \"yellow\":\n                this.cfd.setStrokeColor([255, 255, 0]); // in RGB\n                break;\n                \n        }\n\n    }\n\n    actionButton = (action) => {\n\n        switch(action){\n            case \"undo\":\n                this.cfd.undo();\n                break;\n            case \"redo\":\n                this.cfd.redo();\n                break;\n            case \"bucket\":\n                this.cfd.configBucketTool({\n                    color: this.state.color,\n                    tolerance: 50\n                });\n            const isActive = this.cfd.toggleBucketTool();\n            document.getElementById('button').classList.add('active');\n            if (isActive) {\n            } else {\n              document.getElementById('button').classList.remove('active');\n            }\n            break;\n        }\n\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <canvas id=\"cfd\"></canvas>\n                <button onClick={() => this.changeColor('white')}>Gum</button>\n                <button onClick={() => this.changeColor('black')}>Zwart</button>\n                <button onClick={() => this.changeColor('gray')}>Grijs</button>\n                <button onClick={() => this.changeColor('red')}>Rood</button>\n                <button onClick={() => this.changeColor('blue')}>Blauw</button>\n                <button onClick={() => this.changeColor('purple')}>Paars</button>\n                <button onClick={() => this.changeColor('green')}>Groen</button>\n                <button onClick={() => this.changeColor('brown')}>Bruin</button>\n                <button onClick={() => this.changeColor('orange')}>Oranje</button>\n                <button onClick={() => this.changeColor('yellow')}>Geel</button> \n\n\n\n                <button id=\"button\" onClick={() => this.actionButton('bucket')}>Emmer</button> \n                <button onClick={() => this.actionButton('undo')}>Stapje terug</button> \n                <button onClick={() => this.actionButton('redo')}>Stapje vooruit</button> \n\n\n            </div>\n        )\n    }\n}\n\n\n\nexport default DrawingBoard;"]},"metadata":{},"sourceType":"module"}